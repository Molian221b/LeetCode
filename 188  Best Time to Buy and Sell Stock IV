# dp[第几次][状态][卖了几次]，超时，待优化(看后面，已解决)
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        length = len(prices)
        if length < 2:
            return 0
        
        count = k+1
        dp = [[[0 for i in range(count)] for j in range(2)] for k in range(length)]
        
        dp[0][0][0] = 0
        dp[0][1][0] = -prices[0]

        for k in range(1, count):
            dp[0][0][k] = float("-inf") 
            dp[0][1][k] = float("-inf")

        max_num = float("-inf")
        for i in range(1, length):
            for k in range(count):
                if k == 0:
                    dp[i][0][k] = dp[i-1][0][k]
                else:
                    dp[i][0][k] = max(dp[i-1][0][k], dp[i-1][1][k-1] + prices[i]) 
                dp[i][1][k] = max(dp[i-1][1][k], dp[i-1][0][k] - prices[i])
                max_num = max(max_num, dp[i][0][k], dp[i][1][k])

        return max_num

# 超时的原因在于k>length//2(相当于无限交易次数)时会极大增加计算量，所以改用贪心算法
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        length = len(prices)
        if length < 2:
            return 0

        if k > length//2:
            max_profit = 0
            for i in range(1,length):
                diff =  prices[i] - prices[i-1]
                if diff > 0:
                    max_profit += diff
            return max_profit

        else:
            count = k+1
            dp = [[[0 for z in range(count)] for y in range(2)] for x in range(length)]
            # dp[第几天][买卖状态][卖出次数]

            dp[0][1][0] = -prices[0]
            dp[0][0][0] = 0
            for i in range(1,count):
                dp[0][0][i] = float("-inf")
                dp[0][1][i] = float("-inf")

            max_profit = float("-inf")
            for i in range(1, length):
                for j in range(count):
                    if j == 0:
                        dp[i][0][j] = dp[i-1][0][j]
                    else:
                        dp[i][0][j] = max(dp[i-1][0][j], dp[i-1][1][j-1] + prices[i])
                    dp[i][1][j] = max(dp[i-1][1][j], dp[i-1][0][j] - prices[i])
                    max_profit = max(max_profit, dp[i][0][j], dp[i][1][j])

            return max_profit
