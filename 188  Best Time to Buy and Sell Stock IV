# 动态规划, dp[天数][次数][状态]
# 这里出现了个非常奇怪的问题,下面的写法和这里一模一样,只是改成了dp[天数][状态][次数]
# 然而测试结果却平均缩短了50ms,不明所以,猜测原因是由于要经常访问[状态],
# 后面那种写法经常访问的是dp[][x][]第二位数而不是第一种写法的dp[][][x]第三位数
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if not prices:
            return 0

        days = len(prices)

        if k > days//2:
            res = 0
            for i in range(1, days):
                if prices[i] > prices[i-1]:
                    res += prices[i] - prices[i-1]
            return res

        dp = [[[0 for i in range(2)] for j in range(k+1)] for _ in range(days)]
        dp[0][0][0] = 0 
        dp[0][0][1] = -prices[0]
        for j in range(1, k+1):
            dp[0][j][0] = -float('inf')
            dp[0][j][1] = -float('inf')

        res = 0
        for i in range(1, days):
            for j in range(k+1):
                if j == 0:
                    dp[i][j][0] = 0
                else:
                    dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j-1][1] + prices[i])
                dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j][0] - prices[i])
                res = max(res, dp[i][j][0])

        return res

# class Solution:
#     def maxProfit(self, k: int, prices: List[int]) -> int:
#         if not prices:
#             return 0

#         days = len(prices)

#         if k > days//2:
#             res = 0
#             for i in range(1, days):
#                 if prices[i] > prices[i-1]:
#                     res += prices[i] - prices[i-1]
#             return res

#         dp = [[[0 for i in range(k+1)] for j in range(2)] for _ in range(days)]
#         dp[0][0][0] = 0 
#         dp[0][1][0] = -prices[0]
#         for j in range(1, k+1):
#             dp[0][0][j] = -float('inf')
#             dp[0][1][j] = -float('inf')

#         res = 0
#         for i in range(1, days):
#             for j in range(k+1):
#                 if j == 0:
#                     dp[i][0][j] = 0
#                 else:
#                     dp[i][0][j] = max(dp[i-1][0][j], dp[i-1][1][j-1] + prices[i])
#                 dp[i][1][j] = max(dp[i-1][1][j], dp[i-1][0][j] - prices[i])
#                 res = max(res, dp[i][0][j])

#         return res

# 动态规划标准模板,但由于k>days//2的话会重复计算太多次,所以上面进行了提前处理
# class Solution:
#     def maxProfit(self, k: int, prices: List[int]) -> int:
#         if not prices:
#             return 0
            
#         days = len(prices)
#         dp = [[[0 for i in range(2)] for j in range(k+1)] for _ in range(days)]
#         dp[0][0][0] = 0 
#         dp[0][0][1] = -prices[0]
#         for j in range(1, k+1):
#             dp[0][j][0] = -float('inf')
#             dp[0][j][1] = -float('inf')

#         res = 0
#         for i in range(1, days):
#             for j in range(k+1):
#                 if j == 0:
#                     dp[i][j][0] = 0
#                 else:
#                     dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j-1][1] + prices[i])
#                 dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j][0] - prices[i])
#                 res = max(res, dp[i][j][0])

#         return res
