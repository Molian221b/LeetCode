# dp[第几次][状态][卖了几次]，超时，待优化
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        length = len(prices)
        if length < 2:
            return 0
        
        count = k+1
        dp = [[[0 for i in range(count)] for j in range(2)] for k in range(length)]
        
        dp[0][0][0] = 0
        dp[0][1][0] = -prices[0]

        for k in range(1, count):
            dp[0][0][k] = float("-inf") 
            dp[0][1][k] = float("-inf")

        max_num = float("-inf")
        for i in range(1, length):
            for k in range(count):
                if k == 0:
                    dp[i][0][k] = dp[i-1][0][k]
                else:
                    dp[i][0][k] = max(dp[i-1][0][k], dp[i-1][1][k-1] + prices[i]) 
                dp[i][1][k] = max(dp[i-1][1][k], dp[i-1][0][k] - prices[i])
                max_num = max(max_num, dp[i][0][k], dp[i][1][k])

        return max_num
