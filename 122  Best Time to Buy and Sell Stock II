# 动态规划
# dp[天数][次数][状态]
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        days = len(prices)
        res = 0
        dp = [[0 for i in range(2)] for j in range(days)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        for i in range(1, days):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
            res = max(res, dp[i][0])
        return res

# 贪心
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         profit = 0
#         for i in range(1, len(prices)):
#             if prices[i] > prices[i-1]:
#                 temp = prices[i] - prices[i-1]
#                 profit += temp
#         return profit
