Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.
Example:
Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# 递归
# class Solution:
#     def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
#         if not l1:
#             return l2
#         elif not l2:
#             return l1
        
#         if l1.val <= l2.val:
#             l1.next = self.mergeTwoLists(l1.next,l2)
#             return l1
#         else:
#             l2.next = self.mergeTwoLists(l1,l2.next)
#             return l2
        
# 硬来,自写，未优化
# class Solution:
#     def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
#         if not l1:
#             return l2 # 注意，如果头节点是空的话那么实际上l1 = None而不是[]
#         elif not l2:
#             return l1
#         target = l1 if l1.val <= l2.val else l2
#         cur = None
#         while l1 and l2:         
#             temp = cur
#             if l1.val <= l2.val:
#                 cur = l1
#                 l1 = l1.next  
#             else:
#                 cur = l2
#                 l2 = l2.next
#             if temp:   
#                 temp.next = cur
#         if l1 == None and l2 == None:
#             return target
#         elif l1 == None:
#             cur.next = l2
#         elif l2 == None:
#             cur.next = l1
#         return target
