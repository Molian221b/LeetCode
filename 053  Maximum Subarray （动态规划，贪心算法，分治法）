# # 动态规划,时间复杂度O(n),空间复杂度O(n)
# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         # dp[i] 代表结尾是nums[i]的最大连续数组
#         if nums == []:
#             return 0
#         dp = [0]*len(nums)
#         dp[0] = nums[0]
#         for i in range(1, len(nums)):
#             dp[i] = max(0, dp[i-1]) + nums[i]
#         return max(dp)
#
# # 一种更好的写法,时间复杂度O(n),空间复杂度O(1),其实相当于把上面的dp覆盖nums
# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         length = len(nums)
#         max_num = nums[0]
#         for i in range(1, length):
#             if nums[i-1] > 0:
#                 nums[i] = nums[i-1] + nums[i]
#             max_num = max(max_num, nums[i])
#         return max_num

# # 贪心算法,时间复杂度O(n)
# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         length = len(nums)
#         current = nums[0]
#         max_num = nums[0]
#         for i in range(1, length):
#             # 为什么是nums[i]？因为如果nums[i]则说明current<=0，那样的话接下来就从nums[i]开始了
#             # 如果num[i]<current+nums[i]，那说明current>0,注意，这里并不见得current变大了，只是保证
#             # 指针定位到nums[i]
#             current = max(nums[i], current+nums[i]) 
#             max_num = max(current, max_num)
#         return max_num

# # 分治法,时间复杂度O(nlogn)
# class Solution:
#     def maxSubArray(self, nums: List[int]) -> int:
#         length = len(nums)
#         if length == 0:
#             return 0
#         if length == 1:
#             return nums[0]
        
#         max_left = self.maxSubArray(nums[:length//2])
#         max_right = self.maxSubArray(nums[length//2:])

#         # 以nums[i]为最右元素的列表最大子序和，列表左半部分
#         middle_left = float('-inf')
#         sum_left = 0
#         for i in range(length//2-1,-1,-1):
#             sum_left += nums[i]
#             middle_left = max(middle_left, sum_left)

#         # 以nums[i]为最左元素的列表最大子序和，列表左半部分
#         middle_right = float('-inf')
#         sum_right = 0
#         for i in range(length//2,length):
#             sum_right += nums[i]
#             middle_right = max(middle_right, sum_right)
#         max_middle = middle_left + middle_right

#         print(max_left,max_middle,max_right)
#         return max(max_left, max_middle, max_right)
