# 给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。
请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。

# 最常想到的方法，时间复杂度好像为O((m+n)log(m+n))，具体要看sort()排序的时间复杂度，
# 可参考（https://blog.csdn.net/yangzhongblog/article/details/8184707），
#虽然能通过，但其实并不满足题意
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums3 = nums1 + nums2
        nums3.sort()
        length = len(nums3)
        if length%2 == 0:
            return (nums3[length//2-1]+nums3[length//2])/2
        else:
            return nums3[length//2]

# 理解这种方法的关键在于明白数组nums1,nums2的中位数不可能同时出现在nums3(nums1,nums2合并后数组)的中位数同一边
# 参考(https://www.youtube.com/watch?v=ScCg9v921ns)11:18的图


#参考答案，暂没弄懂他的下标思路
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:

        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        len1, len2 = len(nums1), len(nums2)
        
        left, right, half_len = 0, len1, (len1 + len2 + 1) // 2
        #这里的right,mid1,mid2与我自己的定义不同，指的是长度，比如[0,1,2,3],right=4,mid1=2,是指左半边长度为2
        #又比如[0,1,2],right=3,mid1=1,说明这个长度未过半界
        mid1 = (left + right) // 2   
        mid2 = half_len - mid1
        
        while left < right:
            if mid1 < len1 and nums2[mid2-1] > nums1[mid1]:
                left = mid1 + 1
            else:
                right = mid1
            mid1 = (left + right) // 2 
            mid2 = half_len - mid1
        
        if mid1 == 0: 
            max_of_left = nums2[mid2-1]
        elif mid2 == 0: 
            max_of_left = nums1[mid1-1]
        else: 
            max_of_left = max(nums1[mid1-1], nums2[mid2-1])

        if (len1 + len2) % 2 == 1:
            return max_of_left

        if mid1 == len1: 
            min_of_right = nums2[mid2]
        elif mid2 == len2: 
            min_of_right = nums1[mid1]
        else: 
            min_of_right = min(nums1[mid1], nums2[mid2])

        return (max_of_left + min_of_right) / 2

# 自己写的，击败99.67%
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        len1, len2 = len(nums1), len(nums2)
        # 首先要明白mid,left,right都是下标，而half_len是长度，所以如果len1>len2的话很可能出现half_len-mid为负数的情况
        # 因此要换位让短的数组进行二分，同时也能降低时间复杂度
        if len1 > len2:
            nums1, nums2 = nums2, nums1
            len1, len2 = len2, len1

        left = 0
        right = len1-1
        half_len = (len1+len2+1)//2
        # half_len是奇数过半界的，比如3个取到2，但4个也还是取到2，也就是说偶数没影响

        mid1 = (left+right)//2  # mid1没过半界，比如0,2定位到中间的1，比如0,3还是定位到1（0，1，2，3 的第二个位置）
        mid2 = half_len - mid1 - 2 # mid1，mid2均为具体坐标，mid2数组的长度是过半界的
        # 由于有两个列表所以有两个[0]，所以half_len = mid1+mid2+2，如果两个列表都不为空的话
        while left <= right:
        # 重点理解这里思路，为什么不能left<=right，因为nums1=[]时，left=0,right=-1,mid1=-1，所以nums1[mid1]是没有意义的
        # 同理，nums1=[1],nums2=[3]这种情况时，left=0,right=0,可是mid2=-1，nums2[mid2]没有意义，所以要去掉等号避免进入这个循环
            if nums1[mid1] > nums2[mid2+1]:
                right = mid1 - 1
            else:  # 这里需要重点理解
                left = mid1 + 1
            mid1 = (left+right)//2
            mid2 = half_len - mid1 - 2

        # mid == -1 的意思是mid对应的这个数组每个元素都比中位数大
        if mid1 == -1:  # 代表nums1没有参与进来，比如nums1=[],又比如nums1=[100],nums2=[1,2,3]
            max_left = nums2[mid2]
        elif mid2 == -1: # 当 len1==len2，且所有mid2大于mid1时
        # 重点理解2,要达成这种情况说明len1 >= len2,但一开始限定len1 <= len2,所以说明只有len1==len2才能满足这种情况
            max_left = nums1[mid1]
        else:
            max_left = max(nums1[mid1],nums2[mid2])

        if (len1+len2)%2 != 0:  # 总长为奇数
            return max_left
        # 下面的写法是自己的，与参考答案思路相反，非常难理解
        # 虽然没有else，但下面已经开始偶数判断了
        # if mid1 == -1: # 表示nums1没有参与进来
        #     if len1 == 0: # nums1 == []的情况，也就是nums1在nums2前,实际上等价于nums1全参与了进来只不过长度为0并且放在了最前面，
        #                   # 这也是为什么这段代码等价于下段，一个是考虑哪个没参与进来，一个是考虑哪个全参与了进来
        #         min_right = nums2[mid2+1]
        #     elif len1 == len2: # 因为这种情况下nums2没有mid2+1的位置，也就是nums1正好在nums2后面
        #         min_right = nums1[0]
        #     elif len1 < len2:
        #         min_right = min(nums1[0], nums2[mid2+1])
        # elif mid2 == -1: # 表示nums2没有参与进来
        #     min_right = nums2[0] # 等价于min_right = nums2[mid2+1],由于len2>=len1 所以不用考虑nums2==[]的情况
        # else:
        #     if mid1+1 <= len1-1: # 排除nums1全部在前面（也就是完全参与进来）的情况
        #         min_right = min(nums1[mid1+1],nums2[mid2+1])
        #     else: # 否则右边当然只能是nums2[mid2+1]
        #         min_right = nums2[mid2+1]
        # return (max_left+min_right)/2
        
        # 这是参考答案的思路，比自己想的要好
        if mid1+1 == len1: # 表示nums1全部参与进来
            min_right = nums2[mid2+1]
        elif mid2+1 == len2: # 表示nums2全部参与进来
            min_right = nums1[mid1+1]
        else:
            min_right = min(nums1[mid1+1], nums2[mid2+1])
        return (max_left+min_right)/2
