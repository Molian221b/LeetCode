# 给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。
请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。

# 最常想到的方法，时间复杂度好像为O((m+n)log(m+n))，具体要看sort()排序的时间复杂度，
# 可参考（https://blog.csdn.net/yangzhongblog/article/details/8184707），
#虽然能通过，但其实并不满足题意
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        nums3 = nums1 + nums2
        nums3.sort()
        length = len(nums3)
        if length%2 == 0:
            return (nums3[length//2-1]+nums3[length//2])/2
        else:
            return nums3[length//2]

# 理解这种方法的关键在于明白数组nums1,nums2的中位数不可能同时出现在nums3(nums1,nums2合并后数组)的中位数同一边
