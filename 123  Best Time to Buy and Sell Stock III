# 我的超时写法 -_-
# class Solution:
#     def maxProfit(self, prices):
#         prices.append(0)
#         buy = 0
#         buy_list = []
#         sell_list = []

#         for i in range(1,len(prices)):
#             if prices[i] > prices[buy] and prices[i] > prices[i+1]:
#                 buy_list.append(prices[buy])
#                 sell_list.append(prices[i])
#                 buy = i+1
#             elif prices[i] < prices[buy]:
#                 buy = i

#         if len(sell_list) == 0:   #防止[5,4,3,2,1]
#             return 0
#         elif len(sell_list) == 1: #防止[1,2,3,4,5]
#             return sell_list[0] - buy_list[0]

#         prices.pop()
#         profit = []
#         for i in range(len(buy_list)):
#             for j in range(i,len(sell_list)): #实际上buy_list == sell_list
#                 profit.append([sell_list[j] - buy_list[i], i, j])
#                 #这时profit变成了二维列表，目的是为了检测后面
#                 #sell_list[j] - buy_list[i]是否用了同一个sell_list[i]

#         profit.sort(reverse = True)
#         profit_max = profit[0][0]

#         for i in range(len(profit)-1):
#             for j in range(i+1, len(profit)):
#                 #这个if是为了保证买一次卖一次而不是买几次再卖几次
#                 if profit[i][1] > profit[j][2] or profit[i][2] < profit[j][1]:
#                     profit_max = max(profit_max, profit[i][0] + profit[j][0])

#         return profit_max

# 某答案
class Solution:
    def maxProfit(self, prices):
        if prices==[]:
            return 0
        length=len(prices)
        #结束时的最高利润=[天数][是否持有股票][卖出次数]
        dp=[ [[0,0,0],[0,0,0] ] for i in range(0,length) ]
        #第一天休息
        dp[0][0][0]=0
        #第一天买入
        dp[0][1][0]=-prices[0]
        # 第一天不可能已经有卖出
        dp[0][0][1] = float('-inf')
        dp[0][0][2] = float('-inf')
        #第一天不可能已经卖出
        dp[0][1][1]=float('-inf')
        dp[0][1][2]=float('-inf')
        for i in range(1,length):
            #未持股，未卖出过，说明从未进行过买卖
            dp[i][0][0]=0
            #未持股，卖出过1次，可能是今天卖的，可能是之前卖的
            dp[i][0][1]=max(dp[i-1][1][0]+prices[i],dp[i-1][0][1])
            #未持股，卖出过2次，可能是今天卖的，可能是之前卖的
            dp[i][0][2]=max(dp[i-1][1][1]+prices[i],dp[i-1][0][2])
            #持股，未卖出过，可能是今天买的，可能是之前买的
            dp[i][1][0]=max(dp[i-1][0][0]-prices[i],dp[i-1][1][0])
            #持股，卖出过1次，可能是今天买的，可能是之前买的
            dp[i][1][1]=max(dp[i-1][0][1]-prices[i],dp[i-1][1][1])
            #持股，卖出过2次，不可能
            dp[i][1][2]=float('-inf')
        return max(dp[length-1][0][1],dp[length-1][0][2],0)

