Reverse a singly linked list.
Example:
Input: 1->2->3->4->5->NULL
Output: 5->4->3->2->1->NULL
Follow up:
A linked list can be reversed either iteratively or recursively. Could you implement both?


# 此题可参考https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/
# 动画演示

# 特殊例子，注意 head = copy.copy(next_node) ,如果是head = next_node，会直接引用，也就是head is next_node,
# 从而再下句 head.next = temp1 时 连同 next_node 一起更改，从而无法得到正确答案
# 另外copy分浅拷贝和深拷贝，用的时候留意
import copy
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        next_node = head
        head = None
        while next_node:
            temp1 = head
            head = copy.copy(next_node)  # 如果直接写成head = next_node,那下一步的head.next=temp会同时改变head里面的next属性，因为此时head和next_node都是指向同一个对象
            head.next = temp1
            next_node = next_node.next
        return head

# 双指针迭代
# 写法1
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre = None
        cur = head
        while cur:
            cur.next,pre,cur = pre,cur,cur.next
        return pre
# 写法2
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        pre = None
        cur = head
        while cur:
            temp = cur.next
            cur.next = pre
            pre = cur
            cur = temp
        return pre
        
# 递归
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head
        nextNode = self.reverseList(head.next)
        head.next.next = head
        head.next = None # 这个主要是防止head1.next指向head2造成无限循环
        return nextNode
