Given an unsorted array of integers, find the length of longest increasing subsequence.
Example:
Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:
There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?

# 动态规划
# 这个dp[i]代表的是以nums[i]结尾时目前最长子序列的长度
# class Solution:
#     def lengthOfLIS(self, nums: List[int]) -> int:
#         if not nums:
#             return 0
#         dp = []
#         for i in range(len(nums)):
#             dp.append(1)
#             for j in range(i):
#                 if nums[i] > nums[j]:
#                     dp[i] = max(dp[i], dp[j]+1)
#         return max(dp)

# 贪心+二分
# 这个dp[i]代表的是当前长度（i+1）下最长子序列的末尾最小值，比如[1，3，2]最长子序列是[1，3]或者[1，2]那么这个dp就是[1,2]，而不是[1,3]
# class Solution:
#     def lengthOfLIS(self, nums: List[int]) -> int:
#         dp = []
#         for i in nums:
#             if not dp or i > dp[-1]:
#                 dp.append(i)
#             else:
#                 l, r = 0, len(dp)-1
#                 temp = r
#                 while  l <= r:
#                     mid = (l+r)//2
#                     if i <= dp[mid]:
#                         temp = mid
#                         r = mid - 1
#                     else:
#                         l = mid + 1
#                 dp[temp] = i
#         return len(dp)
