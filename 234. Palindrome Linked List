Given a singly linked list, determine if it is a palindrome.
Example 1:
Input: 1->2
Output: false
Example 2:
Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?

# 快慢指针，自写
# class Solution:
#     def isPalindrome(self, head: ListNode) -> bool:
#         slow = head
#         fast = head
#         pre = None
#         while fast and fast.next:
#             temp = slow
#             slow = slow.next
#             fast = fast.next.next
#             temp.next = pre
#             pre = temp
#         if fast:  # 链表长度为奇数
#             slow_head = pre
#             fast_head = slow.next
#         else:     # 链表长度为偶数
#             slow_head = pre
#             fast_head = slow
#         while slow_head:
#             if slow_head.val != fast_head.val:
#                 return False
#             slow_head = slow_head.next
#             fast_head = fast_head.next
#         return True

# 递归
# 注意nonlocal的使用，可以参照局域变量里的例子
# class Solution:
#     def isPalindrome(self, head: ListNode) -> bool:
#         front = head
#         def check(behind=head):
#             nonlocal front
#             if behind:
#                 if check(behind.next) == False:
#                     return False
#                 if behind.val != front.val:
#                     return False       
#                 front = front.next 
#             return True
#         return check()

# 不使用nonlocal的写法
# class Solution:
#     def isPalindrome(self, head: ListNode) -> bool:
#         self.front = head
#         def check(behind=head):
#             if behind:
#                 if check(behind.next) == False:
#                     return False
#                 if behind.val != self.front.val:
#                     return False       
#                 self.front = self.front.next 
#             return True
#         return check()
