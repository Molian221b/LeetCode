# 动态规划，这么写是标准模板，i 天 k 次 con状态
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         if not prices:
#             return 0
#         days = len(prices)
#         dp = [[[0 for i in range(2)] for j in range(2)] for k in range(days)]
        
#         res = 0
#         dp[0][0][0] = 0
#         dp[0][0][1] = -prices[0]
#         dp[0][1][0] = -float('inf')
#         dp[0][1][1] = -float('inf')
#         for i in range(1, days):
#             for j in range(2):
#                 if j == 0:
#                     dp[i][j][0] = 0
#                 else:
#                     dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j-1][1] + prices[i])
#                 dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j][0] - prices[i])
#                 res = max(res, dp[i][j][0])
#         return res

# 判断验证模板
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         if not prices:
#             return 0
#         days = len(prices)
#         dp = [[[0 for i in range(2)] for j in range(2)] for k in range(days)]
#         print(prices)
#         res = -float('inf')
#         dp[0][0][0] = 0
#         dp[0][0][1] = -prices[0]
#         dp[0][1][0] = -float('inf')
#         dp[0][1][1] = -float('inf')

#         print("dp[{}][{}][0] = {},dp[{}][{}][1] = {}".format(0, 0, dp[0][0][0], 0, 0, dp[0][0][1]))
#         print("dp[{}][{}][0] = {},dp[{}][{}][1] = {}".format(0, 1, dp[0][1][0], 0, 1, dp[0][1][1]))
#         print("---------")
#         for i in range(1, days):
#             for j in range(2):
#                 if j == 0:
#                     dp[i][j][0] = 0
#                 else: # 由于j = 0时 j - 1 = -1 会导致错误结果，这也是为什么要判断 j == 0 的原因
#                     dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j - 1][1] + prices[i])
#                 dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j][0] - prices[i])
#                 print("dp[{}][{}][0] = {},dp[{}][{}][1] = {}".format(i,j,dp[i][j][0],i,j,dp[i][j][1]))

#                 res = max(res, dp[i][j][0])
#             print("---------")
#         return res

# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         length = len(prices)
#         max_num = 0
#         if length < 2:
#             return 0
#         # dp[i]为第i个元素右边的最大值（不包含i）
#         dp = [0] * len(prices)
#         # 注意，for i in range(0,0,-1)并不会返回i,而是什么都不返回，对，就是什么都没有
#         for i in range(length-2,-1,-1):
#             dp[i] = max(prices[i+1], dp[i+1])
#             max_num = max(max_num, dp[i] - prices[i])
#         return max_num

# 贪心
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         min_num = float('inf')
#         res = 0
#         for i in prices:
#             min_num = min(min_num, i)
#             res = max(res, i - min_num)
#         return res
