# dp是Dynamic Programming（动态规划）的缩写
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        length = len(prices)
        max_num = 0
        if length < 2:
            return 0
        # dp[i]为第i个元素右边的最大值（不包含i）
        dp = [0] * len(prices)
        # 注意，for i in range(0,0,-1)并不会返回i,而是什么都不返回，对，就是什么都没有
        for i in range(length-2,-1,-1):
            dp[i] = max(prices[i+1], dp[i+1])
            max_num = max(max_num, dp[i] - prices[i])
        return max_num

# 很巧妙的一种方法
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         min_num = float('inf')
#         max_num = 0
#         for i in prices:
#             min_num = min(min_num, i)
#             max_num = max(max_num, i - min_num)
#         return max_num


# 暴力解法，提示超时
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) < 2:
            return 0
        first = 0
        second = 0
        num = 0
        length = len(prices)
        for i in range(length-1):
            if prices[i] > prices[first] and length > 2:
                continue
            for j in range(i+1, length):
                if prices[j] <= prices[j-1]:
                    continue
                diff = prices[j] - prices[i]
                if diff > num:
                    num = diff
                    first = i
                    second = j
        
        return prices[second] - prices[first]
