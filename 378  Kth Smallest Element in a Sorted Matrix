给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。
请注意，它是排序后的第 k 小元素，而不是第 k 个不同的元素。
示例:
matrix = [
   [ 1,  5,  9],
   [10, 11, 13],
   [12, 13, 15]
],
k = 8,
返回 13。

# 二分法
class Solution():
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:

        # 找出<=target的元素个数
        # 这种方法占用的资源很多
        # def num(matrix, target):
        #     count = 0
        #     for i in range(n):
        #         for j in range(n):
        #             if matrix[i][j] <= target:
        #                 count += 1
        #     return count

        n = len(matrix)
         
        # 这种写法本身就是个难点，而且经测试，while i<n比while<len(m)用时更少
        def num(m, target):
            count = 0
            i, j = 0, n - 1
            while i < n and j >= 0:
                if m[i][j] <= target:
                    i += 1
                    count += j+1
                else:
                    j -= 1
            return count

        left = matrix[0][0]
        right = matrix[-1][-1]

        while left < right:
            mid = (left + right) >> 1
            if num(matrix, mid) < k:
                left = mid + 1
            else:
                right = mid

        return left

# 构建堆
