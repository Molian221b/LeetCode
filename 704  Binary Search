# 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。

# 非递归
class Solution:
    def search(self, nums: List[int], target: int) -> int:

        left = 0
        right = len(nums) - 1

        while left < right:
            # 等价于 mid = (left+right)//2
            mid = (left+right) >> 1
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else: 
                right = mid
            
        if nums[left] == target:
            return left
        else:
            return -1

# 递归
# 写法一，注意方法位置
class Solution:
    def search(self, nums: List[int], target: int) -> int:

        length = len(nums)
        if length < 1:
            return -1

        left = 0
        right = length - 1

        return self.bin_fun(nums, target, left, right)    
        
    def bin_fun(self, nums, target, left, right):
        if left == right:
            if nums[left] == target:
                return left
            else:
                return -1
        mid = (left+right)>>1
        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid
            return self.bin_fun(nums, target, left, right)
        else:
            left = mid + 1
            return self.bin_fun(nums, target, left, right)

# 写法二，注意方法位置
# class Solution:
#     def search(self, nums: List[int], target: int) -> int:

#         length = len(nums)
#         if length < 1:
#             return -1

#         left = 0
#         right = length - 1

#         def bin_fun(left, right):
#             if left == right:
#                 if nums[left] == target:
#                     return left
#                 else:
#                     return -1
#             mid = (left+right)>>1
#             if nums[mid] == target:
#                 return mid
#             elif nums[mid] > target:
#                 right = mid
#                 return bin_fun(left, right)
#             else:
#                 left = mid + 1
#                 return bin_fun(left, right)

#         return bin_fun(left, right)

