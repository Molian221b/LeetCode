class A():
    def __init__(self,num):
        self.val = num

a = A(1)
b = A(2)
c = A(3)

b = a
print(b is a)
# a = c  # 此时 b != a, 因为‘=’是引用传递,此时b的引用是a,而a的引用已经变成c了
# a.val = c.val  # 此时b == a,因为a.val实际上是改变了引用的对象
# 何谓引用，目前的理解是"a这个对象"实际上是两部分：a 还有 “这个对象”，而a是指向这个对象的
# 所谓的b = a，实际上是把这个对象的地址同时给了b这个符号，所以a = c会导致b不再等于a
# 换言之，a.val这种直接改变“这个对象”的行为却可以改变b
print(b is a)
