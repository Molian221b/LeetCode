class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        length = len(prices)
        if length < 2:
            return 0

        dp = [[0 for j in range(2)] for k in range(length)]

        dp[0][0] = 0
        dp[0][1] = -prices[0]

        max_num = float("-inf")
        for i in range(1,length):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)
            dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
            max_num = max(max_num, dp[i][0])

        return max_num

# 以下加入了次数，但会超时
# class Solution:
#     def maxProfit(self, prices: List[int], fee: int) -> int:
#         length = len(prices)
#         if length < 2:
#             return 0

#         # 最多卖出次数,+1是因为后面循环中包含了0
#         count = length//2 + 1
#         # dp[第几天][买卖状态][第几次]
#         dp = [[[0 for z in range(count)] for y in range(2)] for x in range(length)] 
        
#         dp[0][0][0] = 0
#         dp[0][1][0] = -prices[0]
#         for i in range(1, count):
#             dp[0][0][i] = float("-inf")
#             dp[0][1][i] = float("-inf")

#         max_profit = float("-inf")
#         for i in range(1,length):
#             for k in range(count):
#                 if k == 0:
#                     dp[i][0][k] = dp[i-1][0][k]
#                 else:
#                     dp[i][0][k] = max(dp[i-1][0][k], dp[i-1][1][k-1] + prices[i])
#                 dp[i][1][k] = max(dp[i-1][1][k], dp[i-1][0][k] - prices[i])

#                 max_profit = max(max_profit,dp[i][0][k]-k*fee)
        
#         return max_profit

        
