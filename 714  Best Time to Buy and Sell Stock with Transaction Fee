# 贪心,非常非常巧妙,看了很多遍才懂里面的原理和细节
# 假设a,b,c,d, b<c,那么利润分为两种,(d-a)-fee或者(b-a)+(d-c)-2fee
# 化简后就是(d-a)+(b-c)-2fee,由此可见选第一种还是第二种取决于(b-c-fee)是否大于0,
# 如果小于0,分两次买反而吃亏,如果大于0,分两次买更划算,但是这得有一个前提: b-a-fee > 0
# 否则第一次交易根本没有存在的必要,那么实际上a,b,c,d的最大利润就变成了a,c,d之间的问题了
# 如果b-a-fee>0确实成立,同时满足b-c-fee>0,那么就可以确定需要分段交易,一次b-a-fee,和第二次的d-c-fee
# 但如果仔细观察就会发现d只决定了第二次要不要交易,实际上a,b,c,fee这4个值就已经可以判断第一次交易是否需要了
# 又由于d的特殊性,边界问题竟然是不需要考虑的,因为第一次交易后,d就变成了第二次交易中的"sell",顺带一提此时c是"buy"
# 太巧妙了
class Solution:
    def maxProfit(self, prices: list, fee: int) -> int:
        if len(prices) < 2:
            return 0
        buy = sell = prices[0]
        profit = 0
        for cur in prices[1:]:  # 从第二个数字开始检查
            if cur > sell:  # 如果后面数值越来越大,则一直更新sell
                sell = cur
            else:  # 这时碰到第一个不是越来越大的数值
                #  重点在这里,为什么要满足这个条件?
                if sell - buy > fee and sell - cur > fee:  
                    profit += sell - buy - fee
                    buy = sell = cur
                # 这里就是上面提到的如果b-a-fee<0,那么第一次交易根本没有存在的必要
                # 相当于直接跳过b,变成a,c,d的问题
                elif cur < buy:  # 走到这步,如果c<a,那么就单纯变成c,d的问题了
                    buy = sell = cur
        if sell - buy > fee:
            profit += sell - buy - fee
        return profit

# 答案解法，思路同dp，相当于进行了优化
# class Solution(object):
#     def maxProfit(self, prices, fee):
#         cash, hold = 0, -prices[0]
#         for i in range(1, len(prices)):
#             cash = max(cash, hold + prices[i] - fee)
#             hold = max(hold, cash - prices[i])
#         return cash

# class Solution:
#     def maxProfit(self, prices: List[int], fee: int) -> int:
#         length = len(prices)
#         if length < 2:
#             return 0

#         dp = [[0 for j in range(2)] for k in range(length)]

#         dp[0][0] = 0
#         dp[0][1] = -prices[0]

#         max_num = float("-inf")
#         for i in range(1,length):
#             dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)
#             dp[i][1] = max(dp[i-1][1], dp[i-1][0] - prices[i])
#             max_num = max(max_num, dp[i][0])

#         return max_num
