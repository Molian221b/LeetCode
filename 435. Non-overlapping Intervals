Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
Example 1:
Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:
Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:
Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
Note:
You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.

# 贪心
# class Solution:
#     def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
#         if not intervals:
#             return 0
#         intervals.sort(key = lambda a: a[-1]) # 关键是理解为什么要按末位排序
#         count = 0
#         end = -float('inf')
#         for temp in intervals:
#             if temp[0] >= end:
#                 end = temp[-1]
#                 count += 1
#         return len(intervals)-count
        
# 动态规划
# dp[i]代表的是 按末位排序后的intervals 的以intervals[i]为子序列最后一项的 子序列长度
# class Solution:
#     def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
#         if not intervals:
#             return 0
#         intervals.sort(key = lambda a: a[-1])
#         length = len(intervals)
#         dp = [1]*length
#         for i in range(length):
#             for j in range(i-1, -1, -1):
#                 if intervals[i][0] >= intervals[j][-1]:
#                     dp[i] = dp[j]+1  # 这里要这么写一次纯粹是因为下面那句如果写成dp[i] = max(dp[j]+1, dp[i-1])会因为无法调用局域变量j报错
#                     break
#             dp[i] = max(dp[i], dp[i-1])
#         return length - max(dp)
