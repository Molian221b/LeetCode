Given a linked list, swap every two adjacent nodes and return its head.
You may not modify the values in the list's nodes, only nodes itself may be changed.
Example:
Given 1->2->3->4, you should return the list as 2->1->4->3.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# 三指针
# class Solution:
#     def swapPairs(self, head: ListNode) -> ListNode:
#         temp_node = ListNode(-1)
#         temp_node.next = head
#         temp = temp_node
#         while temp.next and temp.next.next:
#             a = temp.next
#             b = a.next
#             temp.next = b
#             a.next = b.next
#             b.next = a
#             temp = temp.next.next
#         return temp_node.next

# 递归
# class Solution:
#     def swapPairs(self, head: ListNode) -> ListNode:
#         if head == None or head.next == None:
#             return head
#         temp = head.next
#         head.next = self.swapPairs(head.next.next)
#         temp.next = head
#         return temp
